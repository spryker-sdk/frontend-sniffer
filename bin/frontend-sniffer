#!/usr/bin/env node

const exitCode = {
    SUCCESS: 0,
    UNKNOWN_ERROR: 1,
    INVALID_ENVIRONMENT: 10,
    SNIFFER_FAIL: 11,
    SNIFFER_RUNTIME_ERROR: 12,
    COLLECTOR_RUNTIME_ERROR: 13
}

process.exitCode = exitCode.SUCCESS

try {
    const program = require('commander');
    const { error } = require('../dist/logger');
    const { environment, sniff, collect } = require('../api');
    const { version } = require('../package.json');

    const manageError = (name, code) => (err) => {
        !!err && error.print(name, 'error:', err)
        process.exitCode = code
    }

    const runCollector = () => {
        collect()
            .catch(manageError('Collector', exitCode.COLLECTOR_RUNTIME_ERROR))
    }

    const runSniffer = () => {
        sniff()
            .then(evaluation => {
                if (!evaluation.isPassed) {
                    process.exitCode = exitCode.SNIFFER_FAIL
                }
            })
            .catch(manageError('Sniffer', exitCode.SNIFFER_RUNTIME_ERROR))
    }

    program
        .version(version, '-v, --version')
        .option('-p, --path [path]', 'set the path for the collector to run', process.cwd())
        .option('-c, --config [config]', 'load a specific configuration file', '')
        .option('-x, --exclude-sniffer', 'run only the collector, excluding the sniffer', false)
        .option('-o, --only [n]', 'collect only the first [n] elements for each stream', null)
        .option('-d, --debug-mode', 'run in debug mode (verbose)', false)
        .option('-l, --level-restriction [level]', 'collect core or project level only', null)
        .parse(process.argv);

    const isValid = environment.update({
        path: program.path,
        configPath: program.config,
        excludeSniffer: program.excludeSniffer,
        only: program.only,
        debugMode: program.debugMode,
        levelRestriction: program.levelRestriction
    })

    if (!isValid) {
        process.exitCode = exitCode.INVALID_ENVIRONMENT
        return
    }

    if (environment.excludeSniffer) {
        return runCollector()
    }

    runSniffer()
} catch (err) {
    process.exitCode = exitCode.UNKNOWN_ERROR
    console.error('Unknown error:', err)
}
